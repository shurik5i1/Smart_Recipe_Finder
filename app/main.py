from fastapi import FastAPI, Depends, HTTPException, status, Query
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List, Optional
from starlette.middleware.cors import CORSMiddleware
import models
import schemas
import crud
import search
from database import engine, get_db


async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(models.Base.metadata.create_all)


# –û–ø–∏—Å–∞–Ω–∏–µ API
description = """
Smart Recipe Finder API –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç. üç≥

## –†–µ—Ü–µ–ø—Ç—ã

–í—ã –º–æ–∂–µ—Ç–µ:
* **–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç** (POST /recipes/)
* **–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤** (GET /recipes/)
* **–ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω —Ä–µ—Ü–µ–ø—Ç** (GET /recipes/{recipe_id})
* **–û–±–Ω–æ–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç** (PUT /recipes/{recipe_id})
* **–£–¥–∞–ª–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç** (DELETE /recipes/{recipe_id})

## –ü–æ–∏—Å–∫

–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –¥–≤—É–º—è —Å–ø–æ—Å–æ–±–∞–º–∏:
* **–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞–º** (GET /search/filter/)
* **–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ** (GET /search/semantic/)
"""


app = FastAPI(
    title="Smart Recipe Finder",
    description=description,
    version="0.0.1",
    openapi_tags=[
        {
            "name": "Recipes",
            "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ CRUD —Å —Ä–µ—Ü–µ–ø—Ç–∞–º–∏.",
        },
        {
            "name": "Search",
            "description": "–ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤.",
        },
        {
            "name": "Health",
            "description": "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API.",
        },
    ]
)


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (—Ä–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # URL –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# Event handler: —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def on_startup():
    await create_tables()
    print("–¢–∞–±–ª–∏—Ü—ã –≤ –ë–î —Å–æ–∑–¥–∞–Ω—ã (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏)")


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
@app.post("/recipes/", response_model=schemas.Recipe, tags=["Recipes"], status_code=status.HTTP_201_CREATED)
async def create_new_recipe(recipe: schemas.RecipeCreate, db: AsyncSession = Depends(get_db)):
    return await crud.create_recipe(db=db, recipe=recipe)


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
@app.get("/recipes/", response_model=List[schemas.Recipe], tags=["Recipes"])
async def read_recipes(skip: int = 0, limit: int = 100, db: AsyncSession = Depends(get_db)):
    recipes = await crud.get_recipes(db=db, skip=skip, limit=limit)
    return recipes


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –µ–≥–æ ID
@app.get("/recipe/{recipe_id}", response_model=schemas.Recipe, tags=["Recipes"])
async def read_recipe(recipe_id: int, db: AsyncSession = Depends(get_db)):
    db_recipe = await crud.get_recipe(db=db, recipe_id=recipe_id)
    if db_recipe is None:
        raise HTTPException(status_code=404, detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_recipe


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
@app.put("/recipes/{recipes}", response_model=schemas.Recipe, tags=["Recipes"])
async def update_existing_recipe(recipe_id: int, recipe: schemas.RecipeUpdate, db: AsyncSession = Depends(get_db)):
    db_recipe = await crud.update_recipe(db=db, recipe_id=recipe_id, recipe=recipe)
    if db_recipe is None:
        raise HTTPException(status_code=400, detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return db_recipe


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –µ–≥–æ ID
@app.delete("/recipe/{recipe_id}", tags=["Recipes"])
async def delete_existing_recipe(recipe_id: int, db: AsyncSession = Depends(get_db)):
    success = await crud.delete_recipe(db=db, recipe_id=recipe_id)
    if not success:
        raise HTTPException(status_code=404, detail="–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"message": f"–†–µ—Ü–µ–ø—Ç —Å ID {recipe_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"}


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–æ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–∞–º
@app.get("/search/filter/", response_model=List[schemas.Recipe], tags=["Search"])
async def search_recipes_by_ingredients(
        include: Optional[List[str]] = Query(None, description="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –±—ã—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `include=–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å&include=—Å—ã—Ä`)"),
        exclude: Optional[List[str]] = Query(None, description="–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –ù–ï –î–û–õ–ñ–ù–û –±—ã—Ç—å –≤ —Ä–µ—Ü–µ–ø—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, `exclude=–ª—É–∫`)"),
        skip: int = 0,
        limit: int = 100,
        db: AsyncSession = Depends(get_db)
):
    ingredient_filter = schemas.IngredientFilter(include=include, exclude=exclude)
    recipe = await search.filter_recipes_by_ingredients(
        db=db,
        ingredient_filter=ingredient_filter,
        skip=skip,
        limit=limit
    )
    return recipe


# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ
@app.get("/search/semantic/", response_model=List[schemas.Recipe], tags=["Search"])
async def search_recipes_by_natural_language(
        query: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã —Å –∫–∞—Ä—Ç–æ—Ñ–µ–ª–µ–º')"),
        skip: int = 0,
        limit: int = 100,
        db: AsyncSession = Depends(get_db)
):
    if not query:
        raise HTTPException(status_code=400, detail="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")

    recipes = await search.semantic_search_recipes(
        db=db,
        natural_language_query=query,
        skip=skip,
        limit=limit
    )
    return recipes

